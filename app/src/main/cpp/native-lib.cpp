#include <jni.h>
#include <string>
#include <nfiq2_algorithm.hpp>
#include <nfiq2api.h>
#include <nfiq2.hpp>
#include <iostream>
#include <memory>
#include <vector>
#include <map>
#include <unordered_map>
#include<iostream>
#include<fstream>
#include <stdexcept>
#include <memory>
#ifdef WINDOWS
#include <direct.h>
#define GetCurrentDir _getcwd
#else
#include <unistd.h>
#define GetCurrentDir getcwd
#endif
using namespace std;
std::string printUsage()
{
    return "example_api: usage: example_api [-h] modelInfoFile "
                 "fingerPrintImage\n";
}
std::string
parsePGM(char *filename, std::shared_ptr<uint8_t> &data, uint32_t &rows,
         uint32_t &cols)
{
    // Open PGM file.
    std::ifstream input(filename, std::ios::binary);
    if (!input.is_open()) {
        return std::string("Cannot open image: ") + std::string(filename) + std::string("\n");
    }

    // Read in magic number.
    std::string magicNumber;
    input >> magicNumber;
    if (magicNumber != "P5") {
        return std::string("Error reading magic number from file.")+std::string("\n");
    }

    uint16_t maxValue;
    // Read in image header values - cols, rows.
    // Ignoring the result of maxValue as it is not needed.
    if (!input.good()) {
        return std::string("Error, premature end of file while reading header.")+std::string("\n");

    }
    uint32_t size = cols * rows;

    // Skip line break.
    input.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

    // Allocating new array on heap.
    uint8_t *dataHeap = new uint8_t[size];
    data.reset(dataHeap, std::default_delete<uint8_t[]>());

    // Read in raw pixel data.
    input.read((char *)data.get(), size);
    if (!input.good()) {
        return std::string("Error, only read ")+std::string("\n");

    }
    return "Passed fine";
}
std::string             // Not calling this function anywhere but it'll dooo
printHelp()
{
    return "NFIQ 2 API Example\n\nThis is a sample program that "
                 "shows how to use the NFIQ 2 API on an image.\n\nThis "
                 "command line tool takes two arguments.\nThe first is the "
                 "path to a NFIQ 2 RandomForest model information file.\n"
                 "The second is the path to a single fingerprint image.\n\n"
                 "Please provide arguments to the binary in the designated "
                 "order.\nEx: $ example_api nist_plain_tir.txt "
                 "fingerImage01.pgm\n";
}

extern "C" JNIEXPORT jstring JNICALL
Java_com_example_aug12_12_MainActivity_stringFromJNI(
        JNIEnv* env,
        jobject /* this */) {
    std::string hello = "Hello from C++";
    NFIQ2::Algorithm a;
    NFIQ2::ModelInfo modelInfoObj {};
    const std::string helpStr { "-h" };
/*
    try {
        modelInfoObj = NFIQ2::ModelInfo(helpStr);
    } catch (...) {
        hello = "Could not parse model info file. "
                   "Ensure it is the first argument on the cmd line\n";
        hello = printUsage();
        return env->NewStringUTF(hello.c_str());
    }

    NFIQ2::Algorithm model {};
    try {
        model = NFIQ2::Algorithm(modelInfoObj);
    } catch (...) {
        hello = "Could not initialize model from model info file\n";
        return env->NewStringUTF(hello.c_str());
    }
    // This calls the PGM parser on the image passed by command line
    // argument.
    uint32_t rows = 0;
    uint32_t cols = 0;
    std::shared_ptr<uint8_t> data {};
    parsePGM("SFinGe_Test01.pgm", data, rows, cols);

    // This constructs a FingerprintImageData object that stores the
    // relevant image information NFIQ 2 needs to compute a score.
    NFIQ2::FingerprintImageData rawImage = NFIQ2::FingerprintImageData(
            data.get(), cols * rows, cols, rows, 0, 0);     //Put the value of PPI

    // Calculate all feature values.
    std::vector<std::shared_ptr<NFIQ2::QualityFeatures::Module>> modules {};
    try {
        modules = NFIQ2::QualityFeatures::computeQualityModules(
                rawImage);
    } catch (const NFIQ2::Exception &e) {
        hello = std::string("Error in calculating quality features: ")+ e.what()+'\n';
        return env->NewStringUTF(hello.c_str());
    }
    // Pass the feature values through the random forest to obtain  an
    // NFIQ 2 quality score
    unsigned int nfiq2 {};
    try {
        nfiq2 = model.computeQualityScore(modules);
    } catch (...) {
        hello =  "Error in calculating NFIQ 2 score\n";
        return env->NewStringUTF(hello.c_str());
    }

    // The output generated by this sample app is detailed in the
    // README file. The following code iterates through
    // the NFIQ2Results object, extracts scores, and prints them to
    // stdout.
    hello = "QualityScore: " + nfiq2 ;  // This is where we get the final score

    // Actionable Feedback
    std::vector<std::string> actionableIDs =
            NFIQ2::QualityFeatures::getActionableQualityFeedbackIDs();  // Don't need this function

    std::unordered_map<std::string, double> actionableQuality =
            NFIQ2::QualityFeatures::getActionableQualityFeedback(modules);      // Don't need this function


    // Quality Feature Values
    std::vector<std::string> featureIDs =
            NFIQ2::QualityFeatures::getQualityFeatureIDs();  // Don't need this function either

    std::unordered_map<std::string, double> qualityFeatures =
            NFIQ2::QualityFeatures::getQualityFeatureValues(modules);   //Don't need this function
*/
    ofstream myfile;
    myfile.open("example.txt");
    myfile << "Hello from myfile";
    string line;
    line << myfile;

    return env->NewStringUTF(line.c_str());
}